/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../common';
import type { UserPool, UserPoolInterface } from '../UserPool';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_userAddress',
        type: 'address',
      },
      {
        internalType: 'string',
        name: '_userName',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_userProfile',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_userIcon',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161031c38038061031c83398181016040528101906100329190610214565b600084905050505050506102cf565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061008082610055565b9050919050565b61009081610075565b811461009b57600080fd5b50565b6000815190506100ad81610087565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610106826100bd565b810181811067ffffffffffffffff82111715610125576101246100ce565b5b80604052505050565b6000610138610041565b905061014482826100fd565b919050565b600067ffffffffffffffff821115610164576101636100ce565b5b61016d826100bd565b9050602081019050919050565b60005b8381101561019857808201518184015260208101905061017d565b60008484015250505050565b60006101b76101b284610149565b61012e565b9050828152602081018484840111156101d3576101d26100b8565b5b6101de84828561017a565b509392505050565b600082601f8301126101fb576101fa6100b3565b5b815161020b8482602086016101a4565b91505092915050565b6000806000806080858703121561022e5761022d61004b565b5b600061023c8782880161009e565b945050602085015167ffffffffffffffff81111561025d5761025c610050565b5b610269878288016101e6565b935050604085015167ffffffffffffffff81111561028a57610289610050565b5b610296878288016101e6565b925050606085015167ffffffffffffffff8111156102b7576102b6610050565b5b6102c3878288016101e6565b91505092959194509250565b603f806102dd6000396000f3fe6080604052600080fdfea2646970667358221220545e4dc4c029dc219227f9240e84a7645da7d8f0ed1099844d76d4a781f2954c64736f6c63430008110033';

type UserPoolConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: UserPoolConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class UserPool__factory extends ContractFactory {
  constructor(...args: UserPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _userAddress: PromiseOrValue<string>,
    _userName: PromiseOrValue<string>,
    _userProfile: PromiseOrValue<string>,
    _userIcon: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<UserPool> {
    return super.deploy(_userAddress, _userName, _userProfile, _userIcon, overrides || {}) as Promise<UserPool>;
  }
  override getDeployTransaction(
    _userAddress: PromiseOrValue<string>,
    _userName: PromiseOrValue<string>,
    _userProfile: PromiseOrValue<string>,
    _userIcon: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_userAddress, _userName, _userProfile, _userIcon, overrides || {});
  }
  override attach(address: string): UserPool {
    return super.attach(address) as UserPool;
  }
  override connect(signer: Signer): UserPool__factory {
    return super.connect(signer) as UserPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserPoolInterface {
    return new utils.Interface(_abi) as UserPoolInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): UserPool {
    return new Contract(address, _abi, signerOrProvider) as UserPool;
  }
}
