/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export declare namespace SharedStruct {
  export type DaoStruct = {
    daoAddres: PromiseOrValue<string>;
    daoName: PromiseOrValue<string>;
    daoProfile: PromiseOrValue<string>;
    daoIcon: PromiseOrValue<string>;
  };

  export type DaoStructOutput = [string, string, string, string] & {
    daoAddres: string;
    daoName: string;
    daoProfile: string;
    daoIcon: string;
  };

  export type UserStruct = {
    userAddress: PromiseOrValue<string>;
    userName: PromiseOrValue<string>;
    userProfile: PromiseOrValue<string>;
    userIcon: PromiseOrValue<string>;
  };

  export type UserStructOutput = [string, string, string, string] & {
    userAddress: string;
    userName: string;
    userProfile: string;
    userIcon: string;
  };

  export type ProjectStruct = {
    belongDaoAddress: PromiseOrValue<string>;
    projectName: PromiseOrValue<string>;
    projectContents: PromiseOrValue<string>;
    projectReword: PromiseOrValue<string>;
  };

  export type ProjectStructOutput = [string, string, string, string] & {
    belongDaoAddress: string;
    projectName: string;
    projectContents: string;
    projectReword: string;
  };
}

export interface ICheersInterface extends utils.Interface {
  functions: {
    'addProjects(address,address,string,string,string)': FunctionFragment;
    'getAllDaoList()': FunctionFragment;
    'getAllUserList()': FunctionFragment;
    'getEachProjectList(address)': FunctionFragment;
    'getMyPoolAddress(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addProjects'
      | 'getAllDaoList'
      | 'getAllUserList'
      | 'getEachProjectList'
      | 'getMyPoolAddress',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addProjects',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getAllDaoList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllUserList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEachProjectList', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMyPoolAddress', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'addProjects', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllDaoList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllUserList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEachProjectList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMyPoolAddress', data: BytesLike): Result;

  events: {};
}

export interface ICheers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICheersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProjects(
      _projectOwnerAddress: PromiseOrValue<string>,
      _belongDaoAddress: PromiseOrValue<string>,
      _projectName: PromiseOrValue<string>,
      _projectContents: PromiseOrValue<string>,
      _projectReword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAllDaoList(overrides?: CallOverrides): Promise<[SharedStruct.DaoStructOutput[]]>;

    getAllUserList(overrides?: CallOverrides): Promise<[SharedStruct.UserStructOutput[]]>;

    getEachProjectList(
      _projectOwnerAdress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[SharedStruct.ProjectStructOutput[]]>;

    getMyPoolAddress(_ownerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
  };

  addProjects(
    _projectOwnerAddress: PromiseOrValue<string>,
    _belongDaoAddress: PromiseOrValue<string>,
    _projectName: PromiseOrValue<string>,
    _projectContents: PromiseOrValue<string>,
    _projectReword: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAllDaoList(overrides?: CallOverrides): Promise<SharedStruct.DaoStructOutput[]>;

  getAllUserList(overrides?: CallOverrides): Promise<SharedStruct.UserStructOutput[]>;

  getEachProjectList(
    _projectOwnerAdress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<SharedStruct.ProjectStructOutput[]>;

  getMyPoolAddress(_ownerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addProjects(
      _projectOwnerAddress: PromiseOrValue<string>,
      _belongDaoAddress: PromiseOrValue<string>,
      _projectName: PromiseOrValue<string>,
      _projectContents: PromiseOrValue<string>,
      _projectReword: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAllDaoList(overrides?: CallOverrides): Promise<SharedStruct.DaoStructOutput[]>;

    getAllUserList(overrides?: CallOverrides): Promise<SharedStruct.UserStructOutput[]>;

    getEachProjectList(
      _projectOwnerAdress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<SharedStruct.ProjectStructOutput[]>;

    getMyPoolAddress(_ownerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addProjects(
      _projectOwnerAddress: PromiseOrValue<string>,
      _belongDaoAddress: PromiseOrValue<string>,
      _projectName: PromiseOrValue<string>,
      _projectContents: PromiseOrValue<string>,
      _projectReword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAllDaoList(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUserList(overrides?: CallOverrides): Promise<BigNumber>;

    getEachProjectList(_projectOwnerAdress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMyPoolAddress(_ownerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addProjects(
      _projectOwnerAddress: PromiseOrValue<string>,
      _belongDaoAddress: PromiseOrValue<string>,
      _projectName: PromiseOrValue<string>,
      _projectContents: PromiseOrValue<string>,
      _projectReword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAllDaoList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUserList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEachProjectList(
      _projectOwnerAdress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMyPoolAddress(_ownerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
