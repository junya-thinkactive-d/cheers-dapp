/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export interface ProjectPoolInterface extends utils.Interface {
  functions: {
    "cheerListData()": FunctionFragment;
    "cheersDapp()": FunctionFragment;
    "cher()": FunctionFragment;
    "getTotalCher()": FunctionFragment;
    "mintCheer(uint256,string)": FunctionFragment;
    "poolListData()": FunctionFragment;
    "projectContents()": FunctionFragment;
    "projectName()": FunctionFragment;
    "projectReword()": FunctionFragment;
    "totalCher()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cheerListData"
      | "cheersDapp"
      | "cher"
      | "getTotalCher"
      | "mintCheer"
      | "poolListData"
      | "projectContents"
      | "projectName"
      | "projectReword"
      | "totalCher"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'cheersDapp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cher', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllCheers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalCher', values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cheerListData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cheersDapp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalCher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintCheer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolListData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectContents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectReword",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalCher", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "cheerListData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cheersDapp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintCheer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolListData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectReword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalCher", data: BytesLike): Result;

  events: {};
}

export interface ProjectPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProjectPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cheerListData(overrides?: CallOverrides): Promise<[string]>;

    cheersDapp(overrides?: CallOverrides): Promise<[string]>;

    cher(overrides?: CallOverrides): Promise<[string]>;

    getTotalCher(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintCheer(
      _cher: PromiseOrValue<BigNumberish>,
      _cheerMessage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    poolListData(overrides?: CallOverrides): Promise<[string]>;

    projectContents(overrides?: CallOverrides): Promise<[string]>;

    projectName(overrides?: CallOverrides): Promise<[string]>;

    projectReword(overrides?: CallOverrides): Promise<[string]>;

    totalCher(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cheerListData(overrides?: CallOverrides): Promise<string>;

  cheersDapp(overrides?: CallOverrides): Promise<string>;

  cher(overrides?: CallOverrides): Promise<string>;

  getTotalCher(overrides?: CallOverrides): Promise<BigNumber>;

  mintCheer(
    _cher: PromiseOrValue<BigNumberish>,
    _cheerMessage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  poolListData(overrides?: CallOverrides): Promise<string>;

  projectContents(overrides?: CallOverrides): Promise<string>;

  projectName(overrides?: CallOverrides): Promise<string>;

  projectReword(overrides?: CallOverrides): Promise<string>;

  totalCher(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cheerListData(overrides?: CallOverrides): Promise<string>;

    cheersDapp(overrides?: CallOverrides): Promise<string>;

    cher(overrides?: CallOverrides): Promise<string>;

    getTotalCher(overrides?: CallOverrides): Promise<BigNumber>;

    mintCheer(
      _cher: PromiseOrValue<BigNumberish>,
      _cheerMessage: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    poolListData(overrides?: CallOverrides): Promise<string>;

    projectContents(overrides?: CallOverrides): Promise<string>;

    projectName(overrides?: CallOverrides): Promise<string>;

    projectReword(overrides?: CallOverrides): Promise<string>;

    totalCher(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    cheerListData(overrides?: CallOverrides): Promise<BigNumber>;

    cheersDapp(overrides?: CallOverrides): Promise<BigNumber>;

    cher(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCher(overrides?: CallOverrides): Promise<BigNumber>;

    mintCheer(
      _cher: PromiseOrValue<BigNumberish>,
      _cheerMessage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    poolListData(overrides?: CallOverrides): Promise<BigNumber>;

    projectContents(overrides?: CallOverrides): Promise<BigNumber>;

    projectName(overrides?: CallOverrides): Promise<BigNumber>;

    projectReword(overrides?: CallOverrides): Promise<BigNumber>;

    totalCher(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cheerListData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cheersDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalCher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintCheer(
      _cher: PromiseOrValue<BigNumberish>,
      _cheerMessage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    poolListData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectContents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectReword(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCher(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
