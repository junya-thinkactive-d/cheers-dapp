/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ProjectPool,
  ProjectPoolInterface,
} from "../../contracts/ProjectPool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_ownerPoolAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_belongDaoAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_projectName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_projectContents",
        type: "string",
      },
      {
        internalType: "string",
        name: "_projectReword",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "cheerListData",
    outputs: [
      {
        internalType: "contract ICheerListData",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cheersDapp",
    outputs: [
      {
        internalType: "contract ICheers",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cher",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalCher",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_cher",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_cheerMessage",
        type: "string",
      },
    ],
    name: "mintCheer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "poolListData",
    outputs: [
      {
        internalType: "contract IPoolListData",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "projectContents",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "projectName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "projectReword",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "CHERAddress",
        type: "address",
      },
    ],
    name: "setCHER",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cheerListDataAddress",
        type: "address",
      },
    ],
    name: "setCheerListData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolListDataAddress",
        type: "address",
      },
    ],
    name: "setPoolListData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalCher",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600980546001600160a01b0319167338d4172dde4e50a8cdd8b39abc572443d18ad72d1790553480156200003757600080fd5b50604051620012ed380380620012ed8339810160408190526200005a91620001f4565b600b54600c80546001600160a01b03199081166001600160a01b0393841617909155600d54600e80548316918416919091179055600954600080548316918416919091179055600254600180548316918416919091179055600380548216331790556004805488841690831617905560058054928716929091169190911790556006620000e884826200033b565b506007620000f783826200033b565b5060086200010682826200033b565b50505050505062000407565b80516001600160a01b03811681146200012a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015757600080fd5b81516001600160401b03808211156200017457620001746200012f565b604051601f8301601f19908116603f011681019082821181831017156200019f576200019f6200012f565b81604052838152602092508683858801011115620001bc57600080fd5b600091505b83821015620001e05785820183015181830184015290820190620001c1565b600093810190920192909252949350505050565b600080600080600060a086880312156200020d57600080fd5b620002188662000112565b9450620002286020870162000112565b60408701519094506001600160401b03808211156200024657600080fd5b6200025489838a0162000145565b945060608801519150808211156200026b57600080fd5b6200027989838a0162000145565b935060808801519150808211156200029057600080fd5b506200029f8882890162000145565b9150509295509295909350565b600181811c90821680620002c157607f821691505b602082108103620002e257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200033657600081815260208120601f850160051c81016020861015620003115750805b601f850160051c820191505b8181101562000332578281556001016200031d565b5050505b505050565b81516001600160401b038111156200035757620003576200012f565b6200036f81620003688454620002ac565b84620002e8565b602080601f831160018114620003a757600084156200038e5750858301515b600019600386901b1c1916600185901b17855562000332565b600085815260208120601f198616915b82811015620003d857888601518255948401946001909101908401620003b7565b5085821015620003f75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610ed680620004176000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80635e001c341161008c57806373531cfe1161006657806373531cfe146102115780639a33e3001461021a578063f48ca5c114610222578063f6acee231461023557600080fd5b80635e001c34146101b157806365550ba4146101eb57806371b3423d146101fe57600080fd5b806316e66f43146100d45780631a314956146101105780631d90fb1f1461012e578063250a12d91461015957806332b04e2b1461016f5780634a73941e14610177575b600080fd5b61010e6100e2366004610a0d565b600b80546001600160a01b039092166001600160a01b03199283168117909155600c8054909216179055565b005b610118610248565b6040516101259190610a81565b60405180910390f35b600154610141906001600160a01b031681565b6040516001600160a01b039091168152602001610125565b6101616102d6565b604051908152602001610125565b610118610348565b61010e610185366004610a0d565b600d80546001600160a01b039092166001600160a01b03199283168117909155600e8054909216179055565b61010e6101bf366004610a0d565b600980546001600160a01b039092166001600160a01b0319928316811790915560008054909216179055565b61010e6101f9366004610b2c565b610355565b600c54610141906001600160a01b031681565b610161600a5481565b610118610484565b600e54610141906001600160a01b031681565b600054610141906001600160a01b031681565b6007805461025590610bb6565b80601f016020809104026020016040519081016040528092919081815260200182805461028190610bb6565b80156102ce5780601f106102a3576101008083540402835291602001916102ce565b820191906000526020600020905b8154815290600101906020018083116102b157829003601f168201915b505050505081565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610bf0565b905090565b6008805461025590610bb6565b600054600c54604051630accd1a960e11b815233600482015284926001600160a01b03908116926370a0823192911690631599a35290602401602060405180830381865afa1580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf9190610c09565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104379190610bf0565b10156104765760405162461bcd60e51b815260206004820152600a60248201526909cdee840cadcdeeaced60b31b604482015260640160405180910390fd5b6104808282610491565b5050565b6006805461025590610bb6565b600054600c54604051630accd1a960e11b81523360048201526001600160a01b03928316926323b872dd921690631599a35290602401602060405180830381865afa1580156104e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105089190610c09565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018590526064016020604051808303816000875af115801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190610c26565b50600e54600c54604051630accd1a960e11b81523360048201526001600160a01b03928316926308df15a3923092911690631599a35290602401602060405180830381865afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190610c09565b4285876040518663ffffffff1660e01b815260040161061d959493929190610c48565b600060405180830381600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b505050506104808280600a60008282546106659190610ca3565b9091555060009050606461067a836046610cbc565b6106849190610cd3565b905060006064610695846019610cbc565b61069f9190610cd3565b90506000816106ae8486610cf5565b6106b89190610cf5565b905060005b600e546040516312d9ac6960e01b81523060048201526001600160a01b03909116906312d9ac6990602401600060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072d9190810190610d08565b518110156108f657600054600e546040516312d9ac6960e01b81523060048201526001600160a01b039283169263a9059cbb9216906312d9ac6990602401600060405180830381865afa158015610788573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107b09190810190610d08565b83815181106107c1576107c1610e71565b6020908102919091018101510151600a54600e546040516312d9ac6960e01b81523060048201526001600160a01b03909116906312d9ac6990602401600060405180830381865afa15801561081a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108429190810190610d08565b858151811061085357610853610e71565b6020026020010151608001518861086a9190610cbc565b6108749190610cd3565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190610c26565b50806108ee81610e87565b9150506106bd565b506000546004805460405163a9059cbb60e01b81526001600160a01b0391821692810192909252602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610c26565b5060005460055460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156109ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ee9190610c26565b5050505050565b6001600160a01b0381168114610a0a57600080fd5b50565b600060208284031215610a1f57600080fd5b8135610a2a816109f5565b9392505050565b60005b83811015610a4c578181015183820152602001610a34565b50506000910152565b60008151808452610a6d816020860160208601610a31565b601f01601f19169290920160200192915050565b602081526000610a2a6020830184610a55565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610acd57610acd610a94565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610afc57610afc610a94565b604052919050565b600067ffffffffffffffff821115610b1e57610b1e610a94565b50601f01601f191660200190565b60008060408385031215610b3f57600080fd5b82359150602083013567ffffffffffffffff811115610b5d57600080fd5b8301601f81018513610b6e57600080fd5b8035610b81610b7c82610b04565b610ad3565b818152866020838501011115610b9657600080fd5b816020840160208301376000602083830101528093505050509250929050565b600181811c90821680610bca57607f821691505b602082108103610bea57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610c0257600080fd5b5051919050565b600060208284031215610c1b57600080fd5b8151610a2a816109f5565b600060208284031215610c3857600080fd5b81518015158114610a2a57600080fd5b6001600160a01b038681168252851660208201526040810184905260a060608201819052600090610c7b90830185610a55565b90508260808301529695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610cb657610cb6610c8d565b92915050565b8082028115828204841417610cb657610cb6610c8d565b600082610cf057634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610cb657610cb6610c8d565b60006020808385031215610d1b57600080fd5b825167ffffffffffffffff80821115610d3357600080fd5b818501915085601f830112610d4757600080fd5b815181811115610d5957610d59610a94565b8060051b610d68858201610ad3565b9182528381018501918581019089841115610d8257600080fd5b86860192505b83831015610e6457825185811115610d9f57600080fd5b860160a0818c03601f19011215610db557600080fd5b610dbd610aaa565b88820151610dca816109f5565b8152604082810151610ddb816109f5565b828b0152606083015181830152608083015188811115610dfb5760008081fd5b8301603f81018e13610e0d5760008081fd5b8a810151610e1d610b7c82610b04565b8181528f84838501011115610e325760008081fd5b610e41828e8301868601610a31565b606085015250505060a09190910151608082015282529186019190860190610d88565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201610e9957610e99610c8d565b506001019056fea264697066735822122058b3866946725138a41496712ac5d0c095a82eb3a36afca2a66061f1c5481dcc64736f6c63430008110033";

type ProjectPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProjectPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProjectPool__factory extends ContractFactory {
  constructor(...args: ProjectPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ownerPoolAddress: PromiseOrValue<string>,
    _belongDaoAddress: PromiseOrValue<string>,
    _projectName: PromiseOrValue<string>,
    _projectContents: PromiseOrValue<string>,
    _projectReword: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProjectPool> {
    return super.deploy(
      _ownerPoolAddress,
      _belongDaoAddress,
      _projectName,
      _projectContents,
      _projectReword,
      overrides || {}
    ) as Promise<ProjectPool>;
  }
  override getDeployTransaction(
    _ownerPoolAddress: PromiseOrValue<string>,
    _belongDaoAddress: PromiseOrValue<string>,
    _projectName: PromiseOrValue<string>,
    _projectContents: PromiseOrValue<string>,
    _projectReword: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ownerPoolAddress,
      _belongDaoAddress,
      _projectName,
      _projectContents,
      _projectReword,
      overrides || {}
    );
  }
  override attach(address: string): ProjectPool {
    return super.attach(address) as ProjectPool;
  }
  override connect(signer: Signer): ProjectPool__factory {
    return super.connect(signer) as ProjectPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProjectPoolInterface {
    return new utils.Interface(_abi) as ProjectPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProjectPool {
    return new Contract(address, _abi, signerOrProvider) as ProjectPool;
  }
}
