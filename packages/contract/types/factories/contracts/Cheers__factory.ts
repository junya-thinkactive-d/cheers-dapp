/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Cheers, CheersInterface } from "../../contracts/Cheers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "daoPoolFactory",
    outputs: [
      {
        internalType: "contract IDaoPoolFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_daoName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_daoProfile",
        type: "string",
      },
      {
        internalType: "string",
        name: "_daoIcon",
        type: "string",
      },
    ],
    name: "newDaoPoolFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_userName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_userProfile",
        type: "string",
      },
      {
        internalType: "string",
        name: "_userIcon",
        type: "string",
      },
    ],
    name: "newUserPoolFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "daoPoolFactoryAddress",
        type: "address",
      },
    ],
    name: "setDaoPoolFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userPoolFactoryAddress",
        type: "address",
      },
    ],
    name: "setUserPoolFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "userPoolFactory",
    outputs: [
      {
        internalType: "contract IUserPoolFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107bc806100e46000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806321991798146100675780636de25e2214610083578063ba280f261461009f578063c0dbf8e3146100bb578063c8edbf8d146100d7578063f73ee1ef146100f5575b600080fd5b610081600480360381019061007c9190610491565b610113565b005b61009d60048036038101906100989190610596565b6101bb565b005b6100b960048036038101906100b49190610491565b6101ff565b005b6100d560048036038101906100d09190610596565b6102a7565b005b6100df6102eb565b6040516100ec9190610622565b60405180910390f35b6100fd610311565b60405161010a919061065e565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663219917988484846040518463ffffffff1660e01b8152600401610172939291906106f8565b6020604051808303816000875af1158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b59190610759565b50505050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba280f268484846040518463ffffffff1660e01b815260040161025e939291906106f8565b6020604051808303816000875af115801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190610759565b50505050565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61039e82610355565b810181811067ffffffffffffffff821117156103bd576103bc610366565b5b80604052505050565b60006103d0610337565b90506103dc8282610395565b919050565b600067ffffffffffffffff8211156103fc576103fb610366565b5b61040582610355565b9050602081019050919050565b82818337600083830152505050565b600061043461042f846103e1565b6103c6565b9050828152602081018484840111156104505761044f610350565b5b61045b848285610412565b509392505050565b600082601f8301126104785761047761034b565b5b8135610488848260208601610421565b91505092915050565b6000806000606084860312156104aa576104a9610341565b5b600084013567ffffffffffffffff8111156104c8576104c7610346565b5b6104d486828701610463565b935050602084013567ffffffffffffffff8111156104f5576104f4610346565b5b61050186828701610463565b925050604084013567ffffffffffffffff81111561052257610521610346565b5b61052e86828701610463565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061056382610538565b9050919050565b61057381610558565b811461057e57600080fd5b50565b6000813590506105908161056a565b92915050565b6000602082840312156105ac576105ab610341565b5b60006105ba84828501610581565b91505092915050565b6000819050919050565b60006105e86105e36105de84610538565b6105c3565b610538565b9050919050565b60006105fa826105cd565b9050919050565b600061060c826105ef565b9050919050565b61061c81610601565b82525050565b60006020820190506106376000830184610613565b92915050565b6000610648826105ef565b9050919050565b6106588161063d565b82525050565b6000602082019050610673600083018461064f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106b3578082015181840152602081019050610698565b60008484015250505050565b60006106ca82610679565b6106d48185610684565b93506106e4818560208601610695565b6106ed81610355565b840191505092915050565b6000606082019050818103600083015261071281866106bf565b9050818103602083015261072681856106bf565b9050818103604083015261073a81846106bf565b9050949350505050565b6000815190506107538161056a565b92915050565b60006020828403121561076f5761076e610341565b5b600061077d84828501610744565b9150509291505056fea2646970667358221220899aa18a55adb6468edf2bd24dbcf81e46c9d90807dc5c4ac86b5e2ae9c28b6c64736f6c63430008110033";

type CheersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CheersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cheers__factory extends ContractFactory {
  constructor(...args: CheersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Cheers> {
    return super.deploy(overrides || {}) as Promise<Cheers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Cheers {
    return super.attach(address) as Cheers;
  }
  override connect(signer: Signer): Cheers__factory {
    return super.connect(signer) as Cheers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheersInterface {
    return new utils.Interface(_abi) as CheersInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Cheers {
    return new Contract(address, _abi, signerOrProvider) as Cheers;
  }
}
