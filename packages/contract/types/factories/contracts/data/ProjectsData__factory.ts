/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ProjectsData,
  ProjectsDataInterface,
} from "../../../contracts/data/ProjectsData";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_projectOwnerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_belongDaoAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_projectName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_projectContents",
        type: "string",
      },
      {
        internalType: "string",
        name: "_projectReword",
        type: "string",
      },
    ],
    name: "addProjects",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allProjectsList",
    outputs: [
      {
        internalType: "address",
        name: "belongDaoAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "projectName",
        type: "string",
      },
      {
        internalType: "string",
        name: "projectContents",
        type: "string",
      },
      {
        internalType: "string",
        name: "projectReword",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "eachProjectsList",
    outputs: [
      {
        internalType: "address",
        name: "belongDaoAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "projectName",
        type: "string",
      },
      {
        internalType: "string",
        name: "projectContents",
        type: "string",
      },
      {
        internalType: "string",
        name: "projectReword",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllProjectList",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "belongDaoAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "projectName",
            type: "string",
          },
          {
            internalType: "string",
            name: "projectContents",
            type: "string",
          },
          {
            internalType: "string",
            name: "projectReword",
            type: "string",
          },
        ],
        internalType: "struct SharedStruct.Project[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_projectOwnerAddress",
        type: "address",
      },
    ],
    name: "getEachProjectList",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "belongDaoAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "projectName",
            type: "string",
          },
          {
            internalType: "string",
            name: "projectContents",
            type: "string",
          },
          {
            internalType: "string",
            name: "projectReword",
            type: "string",
          },
        ],
        internalType: "struct SharedStruct.Project[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061155b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632f92fb2e1461005c5780635874a8121461007857806358cedf57146100ab578063a444a193146100db578063c327dc3f1461010e575b600080fd5b61007660048036038101906100719190610e12565b61012c565b005b610092600480360381019061008d9190610f17565b610349565b6040516100a29493929190610fe5565b60405180910390f35b6100c560048036038101906100c0919061103f565b61054e565b6040516100d291906111f8565b60405180910390f35b6100f560048036038101906100f0919061121a565b6107f7565b6040516101059493929190610fe5565b60405180910390f35b6101166109ef565b60405161012391906111f8565b60405180910390f35b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816102269190611453565b50604082015181600201908161023c9190611453565b5060608201518160030190816102529190611453565b505050600160405180608001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816103139190611453565b5060408201518160020190816103299190611453565b50606082015181600301908161033f9190611453565b5050505050505050565b6000602052816000526040600020818154811061036557600080fd5b9060005260206000209060040201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546103af90611276565b80601f01602080910402602001604051908101604052809291908181526020018280546103db90611276565b80156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b50505050509080600201805461043d90611276565b80601f016020809104026020016040519081016040528092919081815260200182805461046990611276565b80156104b65780601f1061048b576101008083540402835291602001916104b6565b820191906000526020600020905b81548152906001019060200180831161049957829003601f168201915b5050505050908060030180546104cb90611276565b80601f01602080910402602001604051908101604052809291908181526020018280546104f790611276565b80156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b5050505050905084565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156107ec57838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461063790611276565b80601f016020809104026020016040519081016040528092919081815260200182805461066390611276565b80156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b505050505081526020016002820180546106c990611276565b80601f01602080910402602001604051908101604052809291908181526020018280546106f590611276565b80156107425780601f1061071757610100808354040283529160200191610742565b820191906000526020600020905b81548152906001019060200180831161072557829003601f168201915b5050505050815260200160038201805461075b90611276565b80601f016020809104026020016040519081016040528092919081815260200182805461078790611276565b80156107d45780601f106107a9576101008083540402835291602001916107d4565b820191906000526020600020905b8154815290600101906020018083116107b757829003601f168201915b505050505081525050815260200190600101906105ae565b505050509050919050565b6001818154811061080757600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461085090611276565b80601f016020809104026020016040519081016040528092919081815260200182805461087c90611276565b80156108c95780601f1061089e576101008083540402835291602001916108c9565b820191906000526020600020905b8154815290600101906020018083116108ac57829003601f168201915b5050505050908060020180546108de90611276565b80601f016020809104026020016040519081016040528092919081815260200182805461090a90611276565b80156109575780601f1061092c57610100808354040283529160200191610957565b820191906000526020600020905b81548152906001019060200180831161093a57829003601f168201915b50505050509080600301805461096c90611276565b80601f016020809104026020016040519081016040528092919081815260200182805461099890611276565b80156109e55780601f106109ba576101008083540402835291602001916109e5565b820191906000526020600020905b8154815290600101906020018083116109c857829003601f168201915b5050505050905084565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610c5157838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610a9c90611276565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac890611276565b8015610b155780601f10610aea57610100808354040283529160200191610b15565b820191906000526020600020905b815481529060010190602001808311610af857829003601f168201915b50505050508152602001600282018054610b2e90611276565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5a90611276565b8015610ba75780601f10610b7c57610100808354040283529160200191610ba7565b820191906000526020600020905b815481529060010190602001808311610b8a57829003601f168201915b50505050508152602001600382018054610bc090611276565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec90611276565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b50505050508152505081526020019060010190610a13565b50505050905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c9982610c6e565b9050919050565b610ca981610c8e565b8114610cb457600080fd5b50565b600081359050610cc681610ca0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1f82610cd6565b810181811067ffffffffffffffff82111715610d3e57610d3d610ce7565b5b80604052505050565b6000610d51610c5a565b9050610d5d8282610d16565b919050565b600067ffffffffffffffff821115610d7d57610d7c610ce7565b5b610d8682610cd6565b9050602081019050919050565b82818337600083830152505050565b6000610db5610db084610d62565b610d47565b905082815260208101848484011115610dd157610dd0610cd1565b5b610ddc848285610d93565b509392505050565b600082601f830112610df957610df8610ccc565b5b8135610e09848260208601610da2565b91505092915050565b600080600080600060a08688031215610e2e57610e2d610c64565b5b6000610e3c88828901610cb7565b9550506020610e4d88828901610cb7565b945050604086013567ffffffffffffffff811115610e6e57610e6d610c69565b5b610e7a88828901610de4565b935050606086013567ffffffffffffffff811115610e9b57610e9a610c69565b5b610ea788828901610de4565b925050608086013567ffffffffffffffff811115610ec857610ec7610c69565b5b610ed488828901610de4565b9150509295509295909350565b6000819050919050565b610ef481610ee1565b8114610eff57600080fd5b50565b600081359050610f1181610eeb565b92915050565b60008060408385031215610f2e57610f2d610c64565b5b6000610f3c85828601610cb7565b9250506020610f4d85828601610f02565b9150509250929050565b610f6081610c8e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fa0578082015181840152602081019050610f85565b60008484015250505050565b6000610fb782610f66565b610fc18185610f71565b9350610fd1818560208601610f82565b610fda81610cd6565b840191505092915050565b6000608082019050610ffa6000830187610f57565b818103602083015261100c8186610fac565b905081810360408301526110208185610fac565b905081810360608301526110348184610fac565b905095945050505050565b60006020828403121561105557611054610c64565b5b600061106384828501610cb7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110a181610c8e565b82525050565b600082825260208201905092915050565b60006110c382610f66565b6110cd81856110a7565b93506110dd818560208601610f82565b6110e681610cd6565b840191505092915050565b60006080830160008301516111096000860182611098565b506020830151848203602086015261112182826110b8565b9150506040830151848203604086015261113b82826110b8565b9150506060830151848203606086015261115582826110b8565b9150508091505092915050565b600061116e83836110f1565b905092915050565b6000602082019050919050565b600061118e8261106c565b6111988185611077565b9350836020820285016111aa85611088565b8060005b858110156111e657848403895281516111c78582611162565b94506111d283611176565b925060208a019950506001810190506111ae565b50829750879550505050505092915050565b600060208201905081810360008301526112128184611183565b905092915050565b6000602082840312156112305761122f610c64565b5b600061123e84828501610f02565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061128e57607f821691505b6020821081036112a1576112a0611247565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026113097fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826112cc565b61131386836112cc565b95508019841693508086168417925050509392505050565b6000819050919050565b600061135061134b61134684610ee1565b61132b565b610ee1565b9050919050565b6000819050919050565b61136a83611335565b61137e61137682611357565b8484546112d9565b825550505050565b600090565b611393611386565b61139e818484611361565b505050565b5b818110156113c2576113b760008261138b565b6001810190506113a4565b5050565b601f821115611407576113d8816112a7565b6113e1846112bc565b810160208510156113f0578190505b6114046113fc856112bc565b8301826113a3565b50505b505050565b600082821c905092915050565b600061142a6000198460080261140c565b1980831691505092915050565b60006114438383611419565b9150826002028217905092915050565b61145c82610f66565b67ffffffffffffffff81111561147557611474610ce7565b5b61147f8254611276565b61148a8282856113c6565b600060209050601f8311600181146114bd57600084156114ab578287015190505b6114b58582611437565b86555061151d565b601f1984166114cb866112a7565b60005b828110156114f3578489015182556001820191506020850194506020810190506114ce565b86831015611510578489015161150c601f891682611419565b8355505b6001600288020188555050505b50505050505056fea26469706673582212201ca1876536933be5e280360fc1301bd939341cf879b5c36b074f9a0842d398dc64736f6c63430008110033";

type ProjectsDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProjectsDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProjectsData__factory extends ContractFactory {
  constructor(...args: ProjectsDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProjectsData> {
    return super.deploy(overrides || {}) as Promise<ProjectsData>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProjectsData {
    return super.attach(address) as ProjectsData;
  }
  override connect(signer: Signer): ProjectsData__factory {
    return super.connect(signer) as ProjectsData__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProjectsDataInterface {
    return new utils.Interface(_abi) as ProjectsDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProjectsData {
    return new Contract(address, _abi, signerOrProvider) as ProjectsData;
  }
}
