/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SharedStruct {
  export type UserStruct = {
    userAddress: PromiseOrValue<string>;
    userName: PromiseOrValue<string>;
    userProfile: PromiseOrValue<string>;
    userIcon: PromiseOrValue<string>;
  };

  export type UserStructOutput = [string, string, string, string] & {
    userAddress: string;
    userName: string;
    userProfile: string;
    userIcon: string;
  };
}

export interface UsersDataInterface extends utils.Interface {
  functions: {
    "addUsers(address,string,string,string)": FunctionFragment;
    "getAlluserList()": FunctionFragment;
    "users(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addUsers" | "getAlluserList" | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUsers",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAlluserList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAlluserList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {};
}

export interface UsersData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UsersDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUsers(
      _userAddress: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _userProfile: PromiseOrValue<string>,
      _userIcon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAlluserList(
      overrides?: CallOverrides
    ): Promise<[SharedStruct.UserStructOutput[]]>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        userAddress: string;
        userName: string;
        userProfile: string;
        userIcon: string;
      }
    >;
  };

  addUsers(
    _userAddress: PromiseOrValue<string>,
    _userName: PromiseOrValue<string>,
    _userProfile: PromiseOrValue<string>,
    _userIcon: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAlluserList(
    overrides?: CallOverrides
  ): Promise<SharedStruct.UserStructOutput[]>;

  users(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      userAddress: string;
      userName: string;
      userProfile: string;
      userIcon: string;
    }
  >;

  callStatic: {
    addUsers(
      _userAddress: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _userProfile: PromiseOrValue<string>,
      _userIcon: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAlluserList(
      overrides?: CallOverrides
    ): Promise<SharedStruct.UserStructOutput[]>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        userAddress: string;
        userName: string;
        userProfile: string;
        userIcon: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    addUsers(
      _userAddress: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _userProfile: PromiseOrValue<string>,
      _userIcon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAlluserList(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUsers(
      _userAddress: PromiseOrValue<string>,
      _userName: PromiseOrValue<string>,
      _userProfile: PromiseOrValue<string>,
      _userIcon: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAlluserList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
