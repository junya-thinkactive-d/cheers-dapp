/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Cheers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cheers__factory>;
    getContractFactory(
      name: "DaoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaoPool__factory>;
    getContractFactory(
      name: "DaosData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaosData__factory>;
    getContractFactory(
      name: "ProjectsData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProjectsData__factory>;
    getContractFactory(
      name: "UserData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserData__factory>;
    getContractFactory(
      name: "ICheers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICheers__factory>;
    getContractFactory(
      name: "IDaoPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDaoPool__factory>;
    getContractFactory(
      name: "IDaosData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDaosData__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IProjectsData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProjectsData__factory>;
    getContractFactory(
      name: "IUsersData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUsersData__factory>;
    getContractFactory(
      name: "ProjectPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProjectPool__factory>;
    getContractFactory(
      name: "UserPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserPool__factory>;

    getContractAt(
      name: "Cheers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cheers>;
    getContractAt(
      name: "DaoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaoPool>;
    getContractAt(
      name: "DaosData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaosData>;
    getContractAt(
      name: "ProjectsData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProjectsData>;
    getContractAt(
      name: "UserData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserData>;
    getContractAt(
      name: "ICheers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICheers>;
    getContractAt(
      name: "IDaoPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDaoPool>;
    getContractAt(
      name: "IDaosData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDaosData>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IProjectsData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProjectsData>;
    getContractAt(
      name: "IUsersData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUsersData>;
    getContractAt(
      name: "ProjectPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProjectPool>;
    getContractAt(
      name: "UserPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserPool>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
